{
  "api": {
    "name": "FacebookPlugin",
    "slug": "facebookplugin",
    "docs": "",
    "tags": [],
    "methods": [
      {
        "name": "init",
        "signature": "(options: { appId: string; autoLogEvent: boolean | true; }) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ appId: string; autoLogEvent: boolean; }"
          }
        ],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "init"
      },
      {
        "name": "login",
        "signature": "(options: { scope: string[] | null; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ scope: string[] | null; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "login"
      },
      {
        "name": "logEvent",
        "signature": "(options: { name: string; valueToSum: number | void; bundle: Record<string, unknown> | void; }) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ name: string; valueToSum: number | void; bundle: void | Record<string, unknown>; }"
          }
        ],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "Record"
        ],
        "slug": "logevent"
      }
    ],
    "properties": []
  },
  "interfaces": [],
  "enums": [],
  "typeAliases": [
    {
      "name": "Record",
      "slug": "record",
      "docs": "Construct a type with a set of properties K of type T",
      "types": [
        {
          "text": "{\r\n    [P in K]: T;\r\n}",
          "complexTypes": [
            "K",
            "T"
          ]
        }
      ]
    }
  ],
  "pluginConfigs": []
}